#!/usr/bin/nft -f

flush ruleset

define internal_nic = {{ router_lan }}
define external_nic = {{ router_wan }}
define wireguard_nic = "wg0"

define admin = { 10.0.0.0/8 }
define cloudflare_dns = { 1.1.1.1, 1.0.0.1 }

table ip nat {
  chain prerouting {
    type nat hook prerouting priority 0

    # initiate redirecting on the local machine and redirect incoming
    # traffic on port 21 to 21212 which is nice for docker for example
    # redirect
    # tcp dport 21 redirect to 21212
  }

  chain postrouting {
    type nat hook postrouting priority 0

    oifname $external_nic masquerade
  }
}


table inet filter {
  chain input {

    type filter hook input priority 0; policy accept

    # drop all bad actors before we do rel/est
    ip saddr @blackhole drop

    # allow established/related connections
    ct state { established, related } accept

    # early drop of invalid connections
    ct state invalid drop

    # localhost godmode
    iif lo accept

    # Accept from LAN and WireGuard
    iif $internal_nic accept
    iif $wireguard_nic accept

    # if the connection is NEW and is not SYN then drop
    tcp flags != syn ct state new log prefix "FIRST PACKET IS NOT SYN" drop

    # new and sending FIN the connection? DROP!
    tcp flags & (fin|syn) == (fin|syn) log prefix "SCANNER1" drop

    # i don't think we've met but you're sending a reset?
    tcp flags & (syn|rst) == (syn|rst) log prefix "SCANNER2" drop

    # 0 attack?
    tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) log prefix "SCANNER3" drop

    # xmas attack. lights up everything
    tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) log prefix "SCANNER4" drop

    # if the ctstate is invalid
    ct state invalid log flags all prefix "Invalid conntrack state: " counter drop

    # open ssh, http and https and give them the new state
    {% for allow_rule in router_nftable_allow_incoming %}
    {{ allow_rule.protocol }} dport {{ allow_rule.port }} ct state new accept
    {% endfor %}

    # icmpv6 for ipv6 connections
    ip6 nexthdr icmpv6 icmpv6 type {
        destination-unreachable, packet-too-big, time-exceeded,
        parameter-problem, nd-router-advert, nd-neighbor-solicit,
        nd-neighbor-advert
    } limit rate 100/second accept

    # icmp for ipv4 connections
    ip protocol icmp icmp type {
        destination-unreachable, router-advertisement,
        time-exceeded, parameter-problem
    } limit rate 100/second accept

    # otherwise we drop, drop, drop
    #
    # when you are troubleshooting uncomment the next line.
    # log prefix "Incoming packet dropped: "
  }

  set blackhole {
    # blackhole ipset where we set the type of element as ipv4
    type ipv4_addr

    # we will set a timer on the element after which it is cleared
    flags timeout

    # the value of the timer
    timeout 1d
  }

  chain forward {
    type filter hook forward priority 0;

    # allow from loopback and internal nic
    iifname { lo, $internal_nic } accept

    # allow established/related connections
    oifname $internal_nic ct state { established, related } accept

    # Drop everything else
    drop
  }

  chain output {
    type filter hook output priority 0;
  }
}


