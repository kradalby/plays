#!/usr/bin/nft -f

flush ruleset

{% set external_nic = (router_interfaces | filter_wan).name %}

define internal_nic = { {{ router_interfaces | filter_lan | filter_inf_names | join(", ") }} }
define wireguard_nic = wg0
define nonrestricted_net = { 10.0.0.0/8 }
{% if router_interfaces | filter_restricted %}
define restricted_net = { {{ router_interfaces | filter_restricted | filter_inf_addresses | join(", ") }} }
{% endif %}

# AS224
define uninett = {
    79.160.0.0/15,
    129.240.0.0/15
}
define uninett6 = {
    2001:700::/32
}

# AS56655
define terrahost = {
    185.181.60.0/22,
    185.243.216.0/24,
    185.243.217.0/24,
    185.243.218.0/24,
    185.125.168.0/22,
}
define terrahost6 = {
    2a03:94e0::/32
}

# AS201838
define communityfibre = {
    46.102.170.0/23,
    46.102.170.0/24,
    46.102.171.0/24,
    79.171.153.0/24,
    79.171.154.0/23,
    79.171.156.0/22,
    89.36.112.0/20,
    89.45.176.0/20,
    93.113.26.0/23,
    94.176.208.0/23,
    94.177.138.0/23,
    94.247.86.0/23,
    147.12.128.0/17,
    154.49.103.0/24,
    185.59.124.0/22,
    185.71.36.0/22,
    188.212.122.0/23,
    188.215.16.0/23,
    188.215.74.0/23,
}
define communityfibre6 = {
    2a02:6b60::/28
}

# AS29695
define altibox = {
    37.97.0.0/18,
    45.13.240.0/22,
    45.14.52.0/22,
    51.174.0.0/15,
    77.222.192.0/19,
    77.222.204.0/24,
    77.222.212.0/24,
    77.222.213.0/24,
    77.222.214.0/24,
    77.222.216.0/24,
    77.222.217.0/24,
    77.222.218.0/24,
    79.160.0.0/15,
    81.166.0.0/15,
    84.234.128.0/17,
    89.162.0.0/17,
    91.208.24.0/24,
    91.243.69.0/24,
    91.247.74.0/24,
    92.220.0.0/15,
    109.247.0.0/16,
    137.47.0.0/24,
    139.164.0.0/16,
    141.0.64.0/18,
    152.93.0.0/16,
    152.93.0.0/17,
    152.93.4.0/24,
    152.93.60.0/24,
    152.93.103.0/24,
    152.93.105.0/24,
    152.93.115.0/24,
    152.93.128.0/17,
    152.93.134.0/24,
    152.93.205.0/24,
    156.52.0.0/16,
    158.248.0.0/16,
    158.248.128.0/17,
    178.16.64.0/20,
    185.10.28.0/22,
    185.10.29.0/24,
    185.10.31.0/24,
    185.20.104.0/22,
    185.180.64.0/22,
    188.228.0.0/17,
    193.160.148.0/22,
    194.71.91.0/24,
    213.167.96.0/19,
}
define altibox6 = {
    2a01:798::/29
}

# AS288
define esa = {
    131.176.0.0/16,
    151.216.8.0/21
}

define admin_internal = { 10.0.0.0/8, 127.0.0.1/32}
define admin_internal6 = { 10.0.0.0/8, 127.0.0.1/32}
define admin_external = {
    $uninett,
    $terrahost,
    $communityfibre,
    $altibox,
    $esa
}
define admin_external6 = {
    $uninett6,
    $terrahost6,
    $communityfibre6,
    $altibox6,
}

define cloudflare_dns = { 1.1.1.1, 1.0.0.1 }

table ip nat {
  chain prerouting {
    type nat hook prerouting priority -100

    # initiate redirecting on the local machine and redirect incoming
    # traffic on port 21 to 21212 which is nice for docker for example
    # redirect
    # tcp dport 21 redirect to 21212
    {% for redirect in router_nftable_port_redirects %}
    {{ redirect.protocol }} dport {{ redirect.source }} redirect to {{ redirect.destination }}
    {% endfor %}

    {% for redirect in router_nftable_port_forwards %}
    {{ redirect.protocol }} dport {{ redirect.source }} dnat to {{ redirect.destination }}
    {% endfor %}
  }

  chain postrouting {
    type nat hook postrouting priority 100

    oifname {{ external_nic }} masquerade
  }
}


table inet filter {
  chain input {
    type filter hook input priority 0
    policy drop

    # drop all bad actors before we do rel/est
    ip saddr @blackhole drop

    # if the connection is NEW and is not SYN then drop
    tcp flags != syn ct state new log prefix "FIRST PACKET IS NOT SYN" drop

    # new and sending FIN the connection? DROP!
    tcp flags & (fin|syn) == (fin|syn) log prefix "SCANNER1" drop

    # i don't think we've met but you're sending a reset?
    tcp flags & (syn|rst) == (syn|rst) log prefix "SCANNER2" drop

    # 0 attack?
    tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) log prefix "SCANNER3" drop

    # xmas attack. lights up everything
    tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) log prefix "SCANNER4" drop

    # if the ctstate is invalid
    ct state invalid log flags all prefix "Invalid conntrack state: " counter drop

    # early drop of invalid connections
    ct state invalid drop

    # Drop local addresses coming from WAN.
    iifname {{ external_nic }} ip saddr { 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12 } drop

    # localhost godmode
    iif lo accept

    # allow established/related connections
    ct state { established, related } accept

    # Accept from LAN and WireGuard
    iifname { $internal_nic, $wireguard_nic } accept
    iifname "vnet*" accept

    {% if udpbroadcastrelay_ip is defined -%}
    {% for neighbour in udpbroadcastrelay_neighbours -%}
    {% if neighbour.ip != udpbroadcastrelay_ip -%}
    iifname tun_{{ neighbour.site }}0 accept
    {% endif %}
    {% endfor %}
    {% endif %}

    # Allow SSH from certain ISPs
    tcp dport 22 ip saddr $admin_external ct state new accept
    tcp dport 22 ip6 saddr $admin_external6 ct state new accept

    # open ssh, http and https and give them the new state
    {% for allow_rule in router_nftable_allow_incoming %}
    {{ allow_rule.protocol }} dport {{ allow_rule.port }} ct state new accept
    {% endfor %}

    # icmpv6 for ipv6 connections
    ip6 nexthdr icmpv6 icmpv6 type {
        destination-unreachable, packet-too-big, time-exceeded,
        parameter-problem, nd-router-advert, nd-neighbor-solicit,
        nd-neighbor-advert
    } limit rate 100/second accept

    # icmp for ipv4 connections
    ip protocol icmp icmp type {
        destination-unreachable, router-advertisement,
        time-exceeded, parameter-problem
    } limit rate 100/second accept

    # otherwise we drop, drop, drop
    #
    # when you are troubleshooting uncomment the next line.
    # log prefix "Incoming packet dropped: "
  }

  set blackhole {
    # blackhole ipset where we set the type of element as ipv4
    type ipv4_addr

    # we will set a timer on the element after which it is cleared
    flags timeout

    # the value of the timer
    timeout 1d
  }

  chain forward {
    type filter hook forward priority 0;
    policy drop

{% if router_interfaces | filter_restricted %}
    # Drop attempts to contact nonrestricted LAN from restricted LAN
    ip saddr $restricted_net ct state new ip daddr $admin_internal drop
{% endif %}

    # allow from loopback and internal nic
    iifname { lo, $internal_nic, $wireguard_nic } accept

    # allow established/related connections
    oifname { $wireguard_nic, $internal_nic } ct state { established, related } accept

    # Drop everything else
    drop
  }

  chain output {
    type filter hook output priority 0;
    policy accept
  }
}
