---
# File: tasks/main.yml - Main tasks for Consul

- name: Check distribution compatibility
  fail:
    msg: "{{ ansible_distribution }} is not supported by this role"
  when: ansible_distribution not in ['RedHat', 'CentOS', 'Debian', 'Ubuntu']

- name: Fail if not a new release of Red Hat / CentOS
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(7, '<')

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version|version_compare(13.04, '<')

- name: Fail if specified ethernet interface not found
  fail:
    msg: "The ethernet interface specified by consul_iface was not found on this system"
  when: consul_iface not in ansible_interfaces

- name: Fail if iptables is enabled for Red Hat / CentOS
  fail:
    msg: "No support for iptables on {{ ansible_distribution }}, use dnsmasq instead"
  when: consul_iptables_enable and
        (ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(7, '>='))

- name: Fail if both dnsmasq and iptables are enabled
  fail:
    msg: "DNS Forwarding via both dnsmasq and iptables is not supported, enable only one option"
  when: consul_dnsmasq_enable and consul_iptables_enable

- name: Fail if iptables is enabled but no recursors are defined
  fail:
    msg: "If iptables is enabled recursors are required"
  when: consul_iptables_enable and consul_recursors|length == 0

- name: Check bootstrapped state
  stat: path=/etc/consul/.consul_bootstrapped
  register: bootstrap_marker
  ignore_errors: true

- name: Add Consul user
  user: "name=consul comment='Consul user' uid=1042 group=bin"

# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install specified packages
  include: install.yml

- block:
    - name: Generate gossip encryption key
      shell: "PATH=/usr/local/bin:$PATH consul keygen"
      register: consul_keygen
      run_once: true
    - name: Save encryption key
      set_fact: consul_raw_key={{ consul_keygen.stdout }}
  when: consul_raw_key is not defined and not bootstrap_marker.stat.exists

- name: Directories
  file: "dest={{ item }} state=directory owner={{ consul_user }} group={{ consul_group}}"
  with_items:
    - /etc/consul
    - /opt/consul
    - /var/consul
    - /var/log/consul
    - /var/run/consul
    - /etc/consul.d
    - /etc/consul.d/bootstrap
    - /etc/consul.d/client
    - /etc/consul.d/server
- block:

  - name: Bootstrap configuration
    template: "src=config_bootstrap.json.j2 dest={{ consul_config_path }}/bootstrap/config.json"

  - name: debug!
    debug: msg="System {{ inventory_hostname }} has uuid {{ hostvars[groups[consul_group_name][0]] }}"

  - name: Client configuration
    template: "src=config_client.json.j2 dest={{ consul_config_path }}/client/config.json"

  - name: Server configuration
    template: "src=config_server.json.j2 dest={{ consul_config_path }}/server/config.json"

  - include: ../tasks/acl.yml
    when: consul_acl_enable

  - name: Atlas configuration
    template: src=config_atlas.json.j2 dest={{ consul_config_path }}/{{ item }}/config_atlas.json
    with_items:
      - bootstrap
      - server
    when: consul_atlas_enable

  - name: SYSV init script
    template: src=consul_sysvinit.j2 dest=/etc/init.d/consul owner=root group=root mode=755
    when: not ansible_service_mgr == "systemd" and not ansible_os_family == "Debian"

  - name: Debian init script
    template: src=consul_debian.init.j2 dest=/etc/init.d/consul owner=root group=root mode=755
    when: not ansible_service_mgr == "systemd" and ansible_distribution == "Debian"

  - name: systemd script
    template: src=consul_systemd.service.j2 dest=/lib/systemd/system/consul.service owner=root group=root mode=644
    when: ansible_service_mgr == "systemd"

  - name: Start Consul
    service: name=consul state=started enabled=yes

  - name: Consul up?
    wait_for: delay=5 path=/var/run/consul/consul.pid state=present

  - block:
      - name: Reconfigure bootstrap node (systemd)
        replace: dest=/lib/systemd/system/consul.service regexp='bootstrap' replace='server' backup=no
      - name: Reload unit configuration
        shell: systemctl daemon-reload
        notify:
          - restart consul
    when: consul_node_role == "bootstrap" and ansible_service_mgr == "systemd"

  - name: Reconfigure bootstrap node (init.d)
    replace: dest=/etc/init.d/consul regexp='bootstrap' replace='server' backup=no
    when: consul_node_role == "bootstrap" and not ansible_service_mgr == "systemd" and ansible_distribution_major_version|int <= 7

  - name: Bootstrapped marker
    file: dest=/etc/consul/.consul_bootstrapped state=touch

  - include: ../tasks/dnsmasq.yml
    when: consul_dnsmasq_enable

  - include: ../tasks/iptables.yml
    when: consul_iptables_enable

  - include: ../tasks/tls.yml
    when: consul_tls_enable

  - include: ../tasks/client.yml
    when: consul_node_role == "client" and ansible_os_family == "Debian"

  when: not bootstrap_marker.stat.exists
