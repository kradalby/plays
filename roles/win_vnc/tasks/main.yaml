---
# - name: Windows VNC | Ensure TigerVNC
#   win_chocolatey:
#     name: tigervnc
#     state: present
#   notify: Restart TigerVNC
# - name: Windows VNC | Remove old TigerVNC
#   ansible.windows.win_package:
#     product_id: "TigerVNC 64-bit_is1"
#     state: absent

- name: Windows VNC | Ensure TigerVNC
  # Product ID: https://stackoverflow.com/questions/29937568/how-can-i-find-the-product-guid-of-an-installed-msi-setup
  ansible.windows.win_package:
    # http://tigervnc.bphinz.com/nightly/
    path: http://tigervnc.bphinz.com/nightly/windows/tigervnc64-winvnc-1.12.80.exe
    # path: https://nav.dl.sourceforge.net/project/tigervnc/stable/1.12.0/tigervnc64-winvnc-1.12.0.exe
    arguments:
      - "/VERYSILENT"
      - "/SUPPRESSMSGBOXES"
      - "/NORESTART"
      - "/SP-"
    product_id: "TigerVNC 64-bit_is1"
    state: present
  register: vnc_installed

- name: Windows VNC | Configure TigerVNC
  ansible.windows.win_regedit:
    path: 'HKLM:\SOFTWARE\TigerVNC\WinVNC4\'
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
    state: present
  loop:
    - name: "AcceptCutText"
      type: "dword"
      data: "1"
    - name: "AcceptKeyEvents"
      type: "dword"
      data: "1"
    - name: "AcceptPointerEvents"
      type: "dword"
      data: "1"
    - name: "SendCutText"
      type: "dword"
      data: "1"
    - name: "PortNumber"
      type: "dword"
      data: "5900"
    - name: "SecurityTypes"
      type: "string"
      data: "VeNCrypt,TLSVnc,VncAuth"
    - name: "Password"
      type: "binary"
      data: "{{ win_vnc_password_hex }}"
  notify: Restart TigerVNC

- name: Windows VNC | Firewall rule to allow VNC on port 5900
  community.windows.win_firewall_rule:
    name: "{{ item.name }}"
    localport: "5900"
    action: allow
    direction: in
    protocol: "{{ item.protocol }}"
    remoteip: '{{ win_allowed_networks | join(",") if win_allowed_networks|length else "any" }}'
    state: present
    enabled: true
    program: 'C:\Program Files\TigerVNC\winvnc4.exe'
  loop:
    - name: TigerVNC (TCP)
      protocol: tcp
    - name: TigerVNC (UDP)
      protocol: udp

- name: Windows VNC | Ensure UltraVNC service
  ansible.windows.win_service:
    name: uvnc_service
    state: absent

- name: Windows VNC | Ensure TightVNC service
  ansible.windows.win_service:
    name: tvnserver
    state: absent

- name: Windows VNC | Ensure TigerVNC service
  ansible.windows.win_service:
    name: "TigerVNC"
    path: '"C:\Program Files\TigerVNC Server\winvnc4.exe" -service'
    display_name: "TigerVNC Server"
    description: "Provides remote access to this machine via the VNC/RFB protocol."
    state: started
    start_mode: auto
  register: vnc_service_installed
