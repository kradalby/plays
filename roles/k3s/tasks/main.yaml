---
- name: Ensure dependencies
  apt:
    pkg:
      - nfs-common
    state: present

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Check if IPv6 is enabled
  stat:
    path: /proc/sys/net/ipv6/conf/all/forwarding
  register: ipv6

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  when: ipv6.stat.exists

- name: Add PostgreSQL for local deployment
  become: true
  become_user: postgres
  block:
    - name: Ensure psycopg2
      become_user: root
      apt:
        pkg:
          - python3-psycopg2
        state: present
    - name: Add PostgreSQL database
      community.postgresql.postgresql_db:
        name: k3s
        state: present

    - name: Add PostgreSQL user
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        db: k3s
        user: k3s
        password: k3s
        priv: ALL
        state: present

  when: >
    k3s_datastore_on_host_postgres is defined and
    k3s_datastore_on_host_postgres

- name: k3s | Stop master before upgrade
  systemd:
    daemon_reload: true
    name: k3s
    state: stopped
  when: k3s_master|bool

- name: Install k3s on master
  vars:
    params: >-
      -v 0
      --disable local-storage
      --cluster-cidr {{ k3s_cluster_cidr }}
      --service-cidr {{ k3s_service_cidr }}
      --cluster-dns {{ k3s_cluster_dns }}
      {% if k3s_master_ip is defined and k3s_master_ip %}--advertise-address {{ k3s_master_ip }} {% endif %}
      {% if k3s_skip_traefik %}--disable traefik{% endif %}
      {% if k3s_skip_servicelb %}--disable servicelb{% endif %}
      {% if k3s_datastore_endpoint != "" %}--datastore-endpoint {{ k3s_datastore_endpoint }}{% endif %}
      {% if k3s_datastore_on_host_postgres %}--datastore-endpoint postgres://k3s:k3s@127.0.0.1:5432/k3s{% endif %}
  # {% if k3s_logfile is defined %}--log {{ k3s_logfile }}{% endif %}
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
    INSTALL_K3S_EXEC: "server {{ params }}"
  shell: |-
    curl -sfL https://get.k3s.io | sh -s -
  when: k3s_master|bool

- name: Restart k3s master on schedule
  cron:
    name: "Restart k3s master"
    special_time: "{{ k3s_master_scheduled_restart }}"
    job: "/usr/bin/systemctl restart k3s.service"
  when: >
    k3s_master|bool
      and k3s_master_scheduled_restart is defined
      and k3s_master_scheduled_restart != ""

- name: k3s | Start master after upgrade
  systemd:
    daemon_reload: true
    name: k3s
    state: started
  when: k3s_master|bool

- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token
    state: present
  when: k3s_master|bool

- name: k3s | Get master names
  command: >-
    kubectl get node
    --selector=node-role.kubernetes.io/master
    --no-headers
    --output=custom-columns=:.metadata.name
  register: master_names
  when: k3s_master|bool

- name: k3s | Taint master nodes
  command: >-
    kubectl taint nodes {{ item }}
    --overwrite
    node-role.kubernetes.io/master=effect:NoSchedule
  loop: "{{ master_names.stdout_lines }}"
  when: >
    k3s_master|bool and
    not k3s_master_schedule|bool

- name: Register node-token file access mode
  stat:
    path: /var/lib/rancher/k3s/server
  register: p
  when: k3s_master|bool

- name: Change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"
  when: k3s_master|bool

- name: Read node-token from master
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token
  when: k3s_master|bool

- name: Store Master node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
  when: k3s_master|bool

- name: restore node-token file access
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"
  when: k3s_master|bool

- name: Install k3s on workers
  vars:
    token: "{{ hostvars[k3s_master_address]['token'] }}"
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
    INSTALL_K3S_EXEC: >-
      {% if k3s_snapshotter %}--snapshotter {{ k3s_snapshotter }}{% endif %}
    K3S_URL: "https://{{ k3s_master_address }}:6443"
    K3S_TOKEN: "{{ token }}"
  shell: >
    curl -sfL https://get.k3s.io | sh -
  when: >
    k3s_agent|bool
  # and group_name is match(".+_kubernetes")

- name: Restart k3s agent on schedule
  cron:
    name: "Restart k3s agent"
    special_time: "{{ k3s_agent_scheduled_restart }}"
    job: "/usr/bin/systemctl restart k3s-agent.service"
  when: >
    k3s_agent|bool
      and k3s_agent_scheduled_restart is defined
      and k3s_agent_scheduled_restart != ""

# Prevent k3s from eating all resources
# https://github.com/rancher/k3s/issues/294#issuecomment-670372870
- name: k3s | Set SystemD CPU limits on master
  blockinfile:
    path: "{{ systemd_service_path }}/k3s.service"
    insertafter: "[Service]"
    marker: "# --- {mark} Ansible managed block ---"
    block: |-
      CPUQuota={{ k3s_master_cpu_quota }}
      CPUQuotaPeriodSec=50ms
      AllowedCPUs={{ k3s_master_cpu_allowed | join(" ") }}
      MemoryLimit={{ k3s_master_memory_quota }}
      IOReadBandwidthMax={{ k3s_master_io_read_bandwidth }}
      IOWriteBandwidthMax={{ k3s_master_io_write_bandwidth }}
  when: k3s_master|bool
  notify: Restart k3s

- name: k3s | Start master after time is synced
  lineinfile:
    path: "{{ systemd_service_path }}/k3s.service"
    insertafter: "After="
    line: After=time-sync.target
  when: >
    k3s_master|bool
  notify: Restart k3s

- name: k3s | Reload systemd daemon on master
  systemd:
    daemon_reload: true

- name: k3s | Set SystemD CPU limits on agent
  blockinfile:
    path: "{{ systemd_service_path }}/k3s-agent.service"
    insertafter: "[Service]"
    marker: "# --- {mark} Ansible managed block ---"
    block: |-
      CPUQuota={{ k3s_agent_cpu_quota }}
      CPUQuotaPeriodSec=50ms
      AllowedCPUs={{ k3s_agent_cpu_allowed | join(" ") }}
      MemoryLimit={{ k3s_agent_memory_quota }}
      IOReadBandwidthMax={{ k3s_agent_io_read_bandwidth }}
      IOWriteBandwidthMax={{ k3s_agent_io_write_bandwidth }}
  when: >
    k3s_agent|bool
  notify: Restart k3s-agent

- name: k3s | Start agent after time is synced
  lineinfile:
    path: "{{ systemd_service_path }}/k3s-agent.service"
    insertafter: "After="
    line: After=time-sync.target
  when: >
    k3s_agent|bool
  notify: Restart k3s-agent

- name: k3s | Reload systemd daemon on master
  systemd:
    daemon_reload: true
